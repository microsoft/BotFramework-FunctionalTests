steps:
- powershell: |
   switch ("$(Registry)".ToUpper())
   {
      $null { Write-Host ("##vso[task.setvariable variable=RegistryUrl]MyGet") }
      '' { Write-Host ("##vso[task.setvariable variable=RegistryUrl]MyGet") }
      MYGET { Write-Host ("##vso[task.setvariable variable=RegistryUrl]MyGet") }
      NPM { Write-Host ("##vso[task.setvariable variable=RegistryUrl]NPM") }
      default { Write-Host ("##vso[task.setvariable variable=RegistryUrl]$(Registry)") }
   }
  displayName: 'Read registry URL variable'

- template: validateRegistryAndBBVersionSteps.yml
- template: javascriptTagBotBuilderVersion.yml

- powershell: |
   Add-Content $(Parameters.sourceLocation)/deployment-scripts/.deployment "`nBOT_BUILDER_PACKAGE_VERSION = $(BBVersion)"
   Add-Content $(Parameters.sourceLocation)/deployment-scripts/.deployment "`nREGISTRY_SOURCE = $(Source)"

   Write-Host "Set BotBuilder Package Version to: $(BBVersion)"
   Write-Host "Set registry url to: $(Source)"
  failOnStderr: true
  displayName: 'Set BBVersion and Registry URL'
  name: 'Set_Registry_Url'

- task: AzureCLI@1
  displayName: 'Prepare Bot'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: 'call az bot prepare-deploy --code-dir "$(Parameters.sourceLocation)" --lang Javascript'

- powershell: |
   if(-Not [string]::IsNullOrWhiteSpace($env:BotBuilderPackageVersion))
   {
      Write-Host "BotBuilder version set to $(BotBuilderPackageVersion)"
      Add-Content $(Parameters.sourceLocation)/deployment-scripts/.deployment "`nBOT_BUILDER_PACKAGE_VERSION = $(BotBuilderPackageVersion)"
   }
  displayName: 'Add custom BotBuilder version'
  condition: ne(variables['BotBuilderPackageVersion'], '')

- powershell: |
   Write-Host "Compressing project into bot.zip"
   move-item -path $(Parameters.sourceLocation)/deployment-scripts/* -destination $(Parameters.sourceLocation)
   Compress-Archive "$(Parameters.sourceLocation)/*" "$(Parameters.sourceLocation)/bot.zip" -Update
  displayName: 'Zip Bot'

- task: AzureCLI@2
  displayName: 'create Azure resources - new RG template'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     Set-PSDebug -Trace 1;
     # set up resource group, bot channels registration, app service, app service plan
     az deployment sub create --name "$(BotName)$(Build.BuildId)" --template-file "build\templates\template-bot-resources-legacy.json" --location "westus" --parameters appId="$(DeployAppId)" appSecret="$(DeployAppSecret)" botId="$(BotName)" botSku=S1 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)-$(Build.BuildId)" groupName="$(BotGroup)" groupLocation="westus" newAppServicePlanLocation="westus"
     Set-PSDebug -Trace 0;

- task: AzureCLI@1
  displayName: 'Deploy bot'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
      call az webapp deployment source config-zip --resource-group "$(BotName)-RG" --name "$(BotName)-$(Build.BuildId)" --src "$(Parameters.sourceLocation)/bot.zip"

- task: AzureCLI@2
  displayName: 'Show logs'
  condition: succeededOrFailed()
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     az webapp log download --name $(BotName)-$(Build.BuildId) --resource-group $(BotName)-rg --log-file "$(System.DefaultWorkingDirectory)\logs.zip";
     Expand-Archive "$(System.DefaultWorkingDirectory)\logs.zip" -DestinationPath "$(System.DefaultWorkingDirectory)\logs";
     $file = "$(System.DefaultWorkingDirectory)/logs/deployments/*/log.log"
     $content = Get-Content $file
     Write-Output $content
