#
# Build a C# Host bot. Optionally deploy it and a Js Skill bot and run functional tests.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'Debug'
  # AzureSubscription: define this in Azure
  # BotBuilderPackageVersionHost (Optional): define this in Azure
  # BotBuilderPackageVersionSkill (Optional): define this in Azure
  # DeleteResourceGroup (Optional): define this in Azure
  # DotNetJsHostAppId: define this in Azure
  # DotNetJsHostAppSecret: define this in Azure
  # DotNetJsHostBotName: define this in Azure
  # DotNetJsSkillAppId: define this in Azure
  # DotNetJsSkillAppSecret: define this in Azure
  # DotNetJsSkillBotName: define this in Azure  
  # NetCoreSdkVersionHost: define this in Azure
  # NextBuild (Optional): define this in Azure

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(DotNetJsHostBotName)
        SkillBotName: $(DotNetJsSkillBotName)
      steps:
      - template: cleanResourcesStep.yml

- stage: Build
  condition: always()
  jobs:
    - job: Validate_Host_NetCore_Version
      variables:
        Parameters.netCoreSdkVersion: $(NetCoreSdkVersionHost)
      steps:
        - template: dotnetValidateNetCoreSdkVersion.yml

    - job: Build_Host_Bot
      dependsOn: Validate_Host_NetCore_Version
      variables:
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        Parameters.solution: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionHost)/host/SimpleHostBot.sln'
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionHost)/host/SimpleHostBot.csproj'
      steps:
      - template: dotnetInstallPackagesSteps.yml
      - template: dotnetBuildSteps.yml

- stage: Deploy
  condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Deploy_Host
      variables:
        BotName: $(DotNetJsHostBotName)
        DeployAppId: $(DotNetJsHostAppId)
        DeployAppSecret: $(DotNetJsHostAppSecret)
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        ProjectName: SimpleHostBot
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionHost)/host/SimpleHostBot.csproj'
        TemplateLocation: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionHost)/host/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - powershell: |
         # Set values in appsettings.json file.
         $file = "$(System.DefaultWorkingDirectory)\SkillsFunctionalTests\dotnet\$(NetCoreSdkVersionHost)\host\appsettings.json"
         $content = Get-Content -Raw $file | ConvertFrom-Json;
         $content.SkillHostEndpoint = "https://$(DotNetJsHostBotName)-$(Build.BuildId).azurewebsites.net/api/skills";

         # Create Skill Class
         class Skill{[String] $Id; [String] $AppId; [String] $SkillEndpoint;};

         # Create list of botframework skills
         $botFrameworkSkills = New-Object -TypeName System.Collections.Generic.List[Skill];

         # Create Skill object
         $dotnetSkill = New-Object -TypeName Skill;
         $dotnetSkill.Id = "EchoSkillBot";
         $dotnetSkill.AppId = "$(DotNetJsSkillAppId)";
         $dotnetSkill.SkillEndpoint = "https://$(DotNetJsSkillBotName)-$(Build.BuildId).azurewebsites.net/api/messages";

         # Add skill to botframework skill list
         $botFrameworkSkills.Add($dotnetSkill);
         $content.BotFrameworkSkills = $botFrameworkSkills;
         $content | ConvertTo-Json | Set-Content $file;
        displayName: 'Set Host appsettings.json file.'

      - template: dotnetDeploySteps.yml

    - job: Deploy_Skill
      variables:
        BotName: $(DotNetJsSkillBotName)
        DeployAppId: $(DotNetJsSkillAppId)
        DeployAppSecret: $(DotNetJsSkillAppSecret)
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.sourceLocation: 'SkillsFunctionalTests/javascript/skill'
        TemplateLocation: 'SkillsFunctionalTests/javascript/skill/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - template: javascriptDeploySteps.yml

- stage: Test
  dependsOn: Deploy
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(DotNetJsHostBotName)
        Parameters.project: 'SkillsFunctionalTests/tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        Parameters.solution: 'SkillsFunctionalTests/tests/SkillFunctionalTests.sln'
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(succeeded('Build'), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Delete_RG
      steps:
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(DotNetJsHostBotName)-RG" --yes
           call az group delete -n "$(DotNetJsSkillBotName)-RG" --yes
        condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))

- stage: QueueNext
  condition: and(succeededOrFailed(), and(ne(variables['Build.Reason'], 'Manual'), ne(variables['NextBuild'], '')))
  jobs:
    - job: TriggerBuild
      steps:
      - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
        displayName: 'Trigger build $(NextBuild)'
        inputs:
          buildDefinition: '$(NextBuild)'
          buildParameters: 'MyBuildParameter: MBPValue'
          authenticationMethod: 'OAuth Token'
          enableBuildInQueueCondition: true
          blockingBuildsList: '$(NextBuild)'