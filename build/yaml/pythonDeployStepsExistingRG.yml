#
# Deploys using the template SkillsFunctionalTests/python/host/deploymentTemplates/template-with-preexisting-rg.json
#
steps:
- powershell: |
    switch ("$(Registry)".ToUpper())
    {
        $null { Write-Host ("##vso[task.setvariable variable=RegistryUrl]Artifacts") }
        '' { Write-Host ("##vso[task.setvariable variable=RegistryUrl]Artifacts") }
        ARTIFACTS { Write-Host ("##vso[task.setvariable variable=RegistryUrl]Artifacts") }
        TEST.PYPI { Write-Host ("##vso[task.setvariable variable=RegistryUrl]Test.PyPi") }
        PYPI { Write-Host ("##vso[task.setvariable variable=RegistryUrl]PyPi") }
        default { Write-Host ("##vso[task.setvariable variable=RegistryUrl]$(Registry)") }
    }
  displayName: 'Read registry URL variable'
- template: validateRegistryAndBBVersionSteps.yml

- powershell: |
    $file = '$(System.DefaultWorkingDirectory)/$(Parameters.sourceLocation)/requirements.txt'

    $source = "$(RegistryUrl)"
    $extra_source = "https://pypi.org/simple/"
    $version = "$(BBVersion)"
    $condition = ""
    $pre =  ""

    switch($source){
      PyPi {
        $source = "https://pypi.org/simple/"
        $extra_source = "https://pkgs.dev.azure.com/ConversationalAI/BotFramework/_packaging/SDK/pypi/simple/"
      }
      Test.PyPi {
        $source = "https://test.pypi.org/simple/"
        $extra_source = "https://pypi.org/simple/"
      }
      Artifacts {
        $source = "https://pkgs.dev.azure.com/ConversationalAI/BotFramework/_packaging/SDK/pypi/simple/"
        $extra_source = "https://pypi.org/simple/"
      }
    }

    switch($version){
      stable {
        $version = ""
      }
      preview {
        $version = ""
        $pre =  "--pre"
      }
      default {
        $condition = "=="
      }
    }

    Write-Host "Setting Up Requirements..."
    Write-Host "Source: $source"
    Write-Host "Version: $(BBVersion) `n"

    #Add the $source source at the beginning of requirements
    $content = @(Get-Content $file)
    Set-Content -Path $file -Value ("$pre --index-url $source --extra-index-url $extra_source".Trim())
    Add-Content -Path $file -Value $content

    function UpdatePackageVersion($package) {
      #Set Package version to empty value
      $content = @(Get-Content $file)
      $matchinfo = Select-String -Path $file -Pattern $package

      $script = "$package $condition $version"

      if($matchinfo.LineNumber -gt 0) {
        $content[$matchinfo.LineNumber - 1] = $script
        Set-Content -Path $file -Value $content
      
      } else {
        Add-Content -Path $file -Value $script
      }
    }

    UpdatePackageVersion "botbuilder-integration-aiohttp"
    UpdatePackageVersion "botbuilder-dialogs" 

    $content = @(Get-Content $file)
    Write-Host "Requirements:"
    $content

  displayName: 'Set BotBuilder Package Version & Registry Url'
  
- template: pythonTagBotBuilderVersion.yml

- task: AzureCLI@2
  displayName: 'create Azure resources - pre-existing RG template'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     Set-PSDebug -Trace 1;
     az group create --location westus --name $(BotGroup);

     # set up bot channels registration, app service, app service plan
     az deployment group create --resource-group "$(BotGroup)" --name "$(BotName)$(Build.BuildId)" --template-file "build\templates\template-bot-resources-legacy-python-pre.json" --parameters appId="$(DeployAppId)" appSecret="$(DeployAppSecret)" botId="$(BotName)" botSku=S1 newWebAppName="$(BotName)-$(Build.BuildId)" newAppServicePlanName="$(BotName)" appServicePlanLocation="westus" --name "$(BotName)";
     Set-PSDebug -Trace 0;

- script: |
   git config --global user.name "GitPythonDeploymentUser"
   git config --global user.email GitPythonDeploymentUser@Pipeline.com
   git init
   git add .
   git commit -m "cibuildtest"
   git remote add azure https://$(AzureDeploymentUser):$(AzureDeploymentPassword)@$(BotName)-$(Build.BuildId).scm.azurewebsites.net:443/$(BotName)-$(Build.BuildId).git
   git push azure master
  workingDirectory: '$(System.DefaultWorkingDirectory)/$(Parameters.sourceLocation)'
  displayName: 'Git bot deployment'

- task: AzureCLI@2
  displayName: 'Validate git deployment'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     #Getting logs from Azure
     az webapp log download --name $(BotName)-$(Build.BuildId) --resource-group $(BotName)-rg --log-file "$(System.DefaultWorkingDirectory)\logs.zip";
     Expand-Archive "$(System.DefaultWorkingDirectory)\logs.zip" -DestinationPath "$(System.DefaultWorkingDirectory)\logs";
     $file = "$(System.DefaultWorkingDirectory)/logs/deployments/*/log.log"
     $content = Get-Content $file

     #Validates if the log contains the Deployment successful line
     Write-Host "Validating deployment log."
     $containsWord = $content | %{$_ -match "Deployment successful"}
     if ($containsWord -contains $true) {
         Write-Host "Deployment successful, check the git deploy step for more information."
     } else {
         Write-Host "An error occurred during the deploy."
         Write-Output $content
         Write-Error "An error occurred during the deploy."
     }
  condition: succeededOrFailed()
