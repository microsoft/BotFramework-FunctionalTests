#
# Optionally deploy a Js Host bot and a Js Skill bot and run functional tests. (No build stage.)
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'Debug'
  # AzureSubscription: define this in Azure
  # BotBuilderPackageVersionHost (Optional): define this in Azure
  # BotBuilderPackageVersionSkill (Optional): define this in Azure
  # DeleteResourceGroup (Optional): define this in Azure
  # JsJsHostAppId: define this in Azure 
  # JsJsHostAppSecret: define this in Azure
  # JsJsHostBotName: define this in Azure
  # JsJsSkillAppId: define this in Azure
  # JsJsSkillAppSecret: define this in Azure
  # JsJsSkillBotName: define this in Azure
  # NextBuild (Optional): define this in Azure

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(JsJsHostBotName)
        SkillBotName: $(JsJsSkillBotName)
      steps:
      - template: cleanResourcesStep.yml
        
- stage: Deploy
  condition: and(always(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Deploy_Host
      variables:
        BotName: $(JsJsHostBotName)
        DeployAppId: $(JsJsHostAppId)
        DeployAppSecret: $(JsJsHostAppSecret)
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        Parameters.sourceLocation: 'SkillsFunctionalTests/javascript/host'
        TemplateLocation: 'SkillsFunctionalTests/javascript/host/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - powershell: |
         Write-host "Setting values in .env file"
         $file = "$(System.DefaultWorkingDirectory)/SkillsFunctionalTests/javascript/host/.env";
         $content = Get-Content -Raw $file | ConvertFrom-StringData;

         $content.SkillHostEndpoint = "https://$(JsJsHostBotName)-$(Build.BuildId).azurewebsites.net/api/skills";
         $content.SkillId = "EchoSkillBot";
         $content.SkillAppId = "$(JsJsSkillAppId)";
         $content.SkillEndpoint = "https://$(JsJsSkillBotName)-$(Build.BuildId).azurewebsites.net/api/messages";

         Clear-Content $file;
         foreach ($key in $content.keys) { Add-Content $file "$key=$($content.$key)" };
        displayName: 'Update .env file'

      - template: javascriptDeploySteps.yml

    - job: Deploy_Skill
      variables:
        BotName: $(JsJsSkillBotName)
        DeployAppId: $(JsJsSkillAppId)
        DeployAppSecret: $(JsJsSkillAppSecret)
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.sourceLocation: 'SkillsFunctionalTests/javascript/skill'
        TemplateLocation: 'SkillsFunctionalTests/javascript/skill/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - template: javascriptDeploySteps.yml

- stage: Test
  dependsOn: Deploy
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(JsJsHostBotName)
        Parameters.project: 'SkillsFunctionalTests/tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        Parameters.solution: 'SkillsFunctionalTests/tests/SkillFunctionalTests.sln'
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(always(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Delete_RG
      steps:
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(JsJsHostBotName)-RG" --yes
           call az group delete -n "$(JsJsSkillBotName)-RG" --yes
        condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))

- stage: QueueNext
  condition: and(succeededOrFailed(), and(ne(variables['Build.Reason'], 'Manual'), ne(variables['NextBuild'], '')))
  jobs:
    - job: TriggerBuild
      steps:
      - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
        displayName: 'Trigger build $(NextBuild)'
        inputs:
          buildDefinition: '$(NextBuild)'
          buildParameters: 'MyBuildParameter: MBPValue'
          authenticationMethod: 'OAuth Token'
          enableBuildInQueueCondition: true
          blockingBuildsList: '$(NextBuild)'