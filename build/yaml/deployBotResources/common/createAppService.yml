parameters:
  - name: appId
    displayName: Bot's App Registration Id
    type: string

  - name: appInsight
    displayName: Azure Application Insight name
    type: string
    default: ""

  - name: appSecret
    displayName: Bot's App Registration Secret
    type: string

  - name: appServicePlan
    displayName: App Service Plan name
    type: string

  - name: azureSubscription
    displayName: Azure Service Connection
    type: string

  - name: botGroup
    displayName: Bot's Resource Group
    type: string

  - name: botName
    displayName: Bot Name
    type: string

  - name: botPricingTier
    displayName: Bot Pricing Tier
    type: string

  - name: container
    displayName: Container
    type: object
    default:
      registry: ""
      repository: ""
      tag: ""
      port: ""
      command: ""

  - name: projectTag
    displayName: Tag for bot's application service
    type: string

  - name: templateFile
    displayName: Template File Location
    type: string

  - name: resourceSuffix
    displayName: Azure resources' name suffix
    type: string

  - name: sharedResourceGroup
    displayName: Shared Resource Group
    type: string

  - name: virtualNetwork
    displayName: Virtual Network name
    type: string

  - name: virtualNetworkSubnet
    displayName: Virtual Network Subnet name
    type: string

steps:
  - task: AzureCLI@2
    displayName: "Create resources"
    inputs:
      azureSubscription: "${{ parameters.azureSubscription }}"
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        # General
        $settings = @(
          @{ key="appId"                        ; value="${{ parameters.appId }}" }
          @{ key="appSecret"                    ; value="${{ parameters.appSecret }}" }
          @{ key="botName"                      ; value="${{ parameters.botName }}${{ parameters.resourceSuffix }}-$(BUILD.BUILDID)" }
          @{ key="appServicePlanName"           ; value="${{ parameters.appServicePlan }}" }
          @{ key="projectTag"                   ; value="${{ parameters.projectTag }}" }
          @{ key="sharedResourceGroup"          ; value="${{ parameters.sharedResourceGroup }}" }
          @{ key="botLocation"                  ; value="westus" }
        )

        # Pricing Tier
        if(-not ([string]::IsNullOrEmpty("${{ parameters.botPricingTier }}"))) {
          $settings = $settings + @(
            @{ key="botSku"                     ; value="${{ parameters.botPricingTier }}" }
          );
        }

        # Application Inshigts
        if(-not ([string]::IsNullOrEmpty("${{ parameters.appInsight }}"))) {
          $settings = $settings + @(
            @{ key="appInsightsName"            ; value="${{ parameters.appInsight }}" }
          );
        }

        # Virtual Network
        if(-not ([string]::IsNullOrEmpty("${{ parameters.virtualNetwork }}"))) {
          $settings = $settings + @(
            @{ key="virtualNetwork"             ; value="${{ parameters.virtualNetwork }}" }
            @{ key="virtualNetworkSubnet"       ; value="${{ parameters.virtualNetworkSubnet }}" }
          );
        }

        # Container
        if(-not ([string]::IsNullOrEmpty("${{ parameters.container.registry }}"))) {
          $credentials = az acr credential show --name "${{ parameters.container.registry }}" --resource-group "${{ parameters.sharedResourceGroup }}" | ConvertFrom-Json
          $password = $credentials.passwords[0].value;

          $settings = $settings + @(
            @{ key="containerRegistry"          ; value="${{ parameters.container.registry }}" }
            @{ key="containerRegistryPassword"  ; value="$password" }
            @{ key="containerRepository"        ; value="${{ parameters.container.repository }}" }
            @{ key="containerRepositoryTag"     ; value="${{ parameters.container.tag }}" }
            @{ key="containerPort"              ; value="${{ parameters.container.port }}" }
            @{ key="containerCommand"           ; value="${{ parameters.container.command }}" }
          );
        }

        $parameters = ($settings | ForEach-Object { "$($_.key)=`"$($_.value)`"" }) -join " ";

        Invoke-Expression "az deployment group create --resource-group `"${{ parameters.botGroup }}`" --name `"${{ parameters.botName }}${{ parameters.resourceSuffix }}-$(BUILD.BUILDID)`" --template-file `"${{ parameters.templateFile }}`" --parameters $parameters";
