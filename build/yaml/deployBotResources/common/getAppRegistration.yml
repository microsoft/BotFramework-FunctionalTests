parameters:
  appId: ''
  appSecret: ''
  botName: ''

steps:
  - task: AzureCLI@2
    displayName: 'Get AppId & AppSecret'
    inputs:
      azureSubscription: $(AzureSubscription)
      scriptType: ps
      failOnStandardError: true
      scriptLocation: inlineScript
      inlineScript: |
        $secret = New-Object -TypeName psobject;
        $source = "";

        if ([string]::IsNullOrEmpty("${{ parameters.appId }}")) {
          $source = "KeyVault '$(KeyVault)'";
          $entries = az keyvault secret list --vault-name "$(KeyVault)" | ConvertFrom-Json | Where-Object {$_.name -like "${{ parameters.botName }}*"};

          foreach ($entry in $entries) {
            $secretVault = az keyvault secret show --id $entry.id | ConvertFrom-Json;
            $secret | Add-Member -MemberType NoteProperty -Name ($secretVault.name -replace "${{ parameters.botName }}", "") -Value "$($secretVault.value)";
          }
        } else {
          $source = "Pipeline Variables";
          $secret | Add-Member -MemberType NoteProperty -Name AppId -Value "${{ parameters.appId }}";
          $secret | Add-Member -MemberType NoteProperty -Name AppSecret -Value "${{ parameters.appSecret }}";
        }

        if ([string]::IsNullOrEmpty($secret.AppId)) {
          Write-Host  "##vso[task.LogIssue type=error;]AppId is Null or Empty";
          Write-Host "##vso[task.complete result=Failed;]DONE";
        }

        if ([string]::IsNullOrEmpty($secret.AppSecret)) {
          Write-Host  "##vso[task.LogIssue type=error;]AppSecret is Null or Empty";
          Write-Host "##vso[task.complete result=Failed;]DONE";
        }

        Write-Host "Source: $source;";
        Write-Host "AppId: $($secret.AppId);";

        Write-Host "##vso[task.setvariable variable=AppId]$($secret.AppId)"
        Write-Host "##vso[task.setvariable variable=AppSecret]$($secret.AppSecret)"
