parameters:
  - name: botType
    displayName: Bot type
    type: string

  - name: registry
    displayName: Registry source
    type: string

  - name: version
    displayName: Version number
    type: string

steps:
  - task: PowerShell@2
    displayName: 'Evaluate source & version'
    inputs:
      targetType: inline
      failOnStderr: true
      script: |
        # Get Source
        $sourceJSMyGet = "https://botbuilder.myget.org/F/botbuilder-v4-js-daily/npm/"
        $sourceJSv3MyGet = "https://botbuilder.myget.org/F/botbuilder-v3-js-daily/npm/"
        $sourceJSNpm = "https://registry.npmjs.com/"
        $versionNumber = "${{ parameters.version }}"
        $registry = "${{ parameters.registry }}"
        $botType =  "${{ parameters.botType }}"
        switch -regex ($registry) {
          "^($null|MyGet)$" {
            switch ($botType) {
              "SkillV3" { $source = $sourceJSv3MyGet }
              default { $source = $sourceJSMyGet }
            }
          }
          "Npm" { 
            $source = $sourceJSNpm 
            if ([string]::IsNullOrEmpty($versionNumber)){
              $versionNumber = "STABLE"
            }
          }
          default { $source = $registry }
        }
        Write-Host "Source: $source"
        npm config set registry $source

        # Get Version Number
        switch -regex ("$versionNumber") {
          "^($null||LATEST)$" {
            if ($botType -in "SkillV3") {
              if ($source -eq $sourceJSv3MyGet) {
                $versionNumber = npm show botbuilder@latest version | Out-String
              } else {
                $versionNumber = (npm view botbuilder versions | Where-Object {$_ -match "  '3."})[-1].Trim().Replace("'", "").Replace(",", "")
              }
            } else {
              $versionNumber = npm show botbuilder@next version | Out-String
            }
          }
          STABLE {
            if ($botType -in "Host", "Skill") {
              $PackageList = npm show botbuilder@* version | Out-String;
            }
            elseif ($botType -in "SkillV3") {
              $PackageList = npm show botbuilder@3.* version | Out-String;
            }
            $versionNumber = ($PackageList.Split(" ")[-1]).Trim().TrimStart("'").TrimEnd("'");
          }
        }
        Write-Host "Version Number: $versionNumber"
 
        # Set environment variables
        Write-Host "##vso[task.setvariable variable=DependenciesSource]$source"
        Write-Host "##vso[task.setvariable variable=DependenciesVersionNumber]$versionNumber"