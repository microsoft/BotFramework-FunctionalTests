parameters:
  - name: botType
    displayName: Bot type
    type: string

  - name: registry
    displayName: Registry source
    type: string

  - name: version
    displayName: Version number
    type: string

steps:
  - task: PowerShell@2
    displayName: 'Evaluate source & version'
    inputs:
      targetType: inline
      failOnStderr: true
      script: |
        # Get Source
        $sourceDotNetv3MyGet = "https://botbuilder.myget.org/F/botbuilder-v3-dotnet-daily/api/v3/index.json"
        $sourceDotNetArtifacts = "https://pkgs.dev.azure.com/ConversationalAI/BotFramework/_packaging/SDK/nuget/v3/index.json"
        $sourceDotNetMyGet = "https://botbuilder.myget.org/F/botbuilder-v4-dotnet-daily/api/v3/index.json"
        $sourceDotNetNuGet = "https://api.nuget.org/v3/index.json"

        switch -regex ("${{ parameters.registry }}") {
          "^($null|)$" {
            switch ("${{ parameters.botType }}") {
              "SkillV3" { $source = $sourceDotNetv3MyGet }
              default { $source = $sourceDotNetArtifacts }
            }
          }
          "Artifacts" { $source = $sourceDotNetArtifacts }
          "MyGet" { 
            switch ("${{ parameters.botType }}") {
              "SkillV3" { $source = $sourceDotNetv3MyGet }
              default { $source = $sourceDotNetMyGet }
            }
          }
          "NuGet" { $source = $sourceDotNetNuGet }
          default { $source = "${{ parameters.registry }}" }
        }
        Write-Host "Source: $source"

        # Get Version Number
        $tags = ""
        switch -regex ("${{ parameters.version }}") {
          "^($null||LATEST||STABLE)$" {
            if (("${{ parameters.version }}" -in "STABLE") -and ($source -match $sourceDotNetArtifacts)) {
              [Console]::ForegroundColor = "red"
              [Console]::Error.WriteLine("Stable versions of BotBuilder DotNet are not available for this source.")
              [Console]::ResetColor()
              exit 1 # Force exit
            }

            if("${{ parameters.version }}" -notin "STABLE") {
              $tags = "-PreRelease"
            }

            # NOTE: The extra space for the -Pattern flag is intentional. E.g.: -Pattern "^Microsoft.Bot.Builder ".
            if ("${{ parameters.botType }}" -in "Host", "Skill") {
              $PackageList = nuget list "Microsoft.Bot.Builder" -Source "$source" "$tags" | Select-String -Pattern "^Microsoft.Bot.Builder "
              $versionNumber = ($PackageList -split " ")[-1]

            } elseif ("${{ parameters.botType }}" -in "ComposerHost", "ComposerSkill") {
              $PackageList = nuget list "Microsoft.Bot.Builder.Dialogs.Adaptive.Runtime" -Source "$source" "$tags" | Select-String -Pattern "^Microsoft.Bot.Builder.Dialogs.Adaptive.Runtime "
              $versionNumber = ($PackageList -split " ")[-1]

            } elseif ("${{ parameters.botType }}" -eq "SkillV3") {
              $PackageList = nuget list "Microsoft.Bot.Builder.History" -Source "$source" "$tags" | Select-String -Pattern "^Microsoft.Bot.Builder.History "
              $versionNumber = ($PackageList -split " ")[-1]
            }
          }
          default { $versionNumber = "${{ parameters.version }}" }
        }
        Write-Host "Version Number: $versionNumber"

        # Set environment variables
        Write-Host "##vso[task.setvariable variable=DependenciesSource]$source"
        Write-Host "##vso[task.setvariable variable=DependenciesVersionNumber]$versionNumber"
