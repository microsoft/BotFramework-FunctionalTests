parameters:
  - name: appInsight
    displayName: Azure Application Insight name
    type: string

  - name: appServicePlan
    displayName: App Service Plan name
    type: string

  - name: appServicePlanRG
    displayName: App Service Plan Resource Group
    type: string

  - name: azureSubscription
    displayName: Azure Service Connection
    type: string

  - name: bots
    displayName: Bots
    type: object

  - name: botPricingTier
    displayName: Bot Pricing Tier
    type: string

  - name: keyVault
    displayName: Key Vault name
    type: string

  - name: output
    displayName: Output location
    type: object
    default:
      path: "build-composer"
      zip: "build"

  - name: resourceGroup
    displayName: Resource Group
    type: string

  - name: resourceSuffix
    displayName: Azure resources' name suffix
    type: string

stages:
- ${{ each bot in parameters.bots }}:
  - stage: "Deploy_${{ bot.name }}"
    ${{ if eq(bot.displayName, '') }}:
      displayName: "${{ bot.name }}"
    ${{ if ne(bot.displayName, '') }}:
      displayName: "${{ bot.displayName }}"
    dependsOn: "${{ bot.dependsOn }}"
    jobs:
      - job: "Deploy"
        displayName: "Deploy steps"
        steps:
          # Delete Bot Resources
          - template: ../common/deleteResources.yml
            parameters:
              azureSubscription: "${{ parameters.azureSubscription }}"
              resourceGroup: "${{ parameters.resourceGroup }}"
              resourceName: "${{ bot.name }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Gets Bot App Registration credentials from KeyVault or Pipeline Variables
          - template: ../common/getAppRegistration.yml
            parameters:
              appId: ${{ bot.appId }}
              appSecret: ${{ bot.appSecret }}
              azureSubscription: "${{ parameters.azureSubscription }}"
              botName: "${{ bot.name }}"
              keyVault: "${{ parameters.keyVault }}"

          # Use Net Core version
          - ${{ if ne(bot.project.netCoreVersion, '') }}:
            - task: UseDotNet@2
              displayName: "Use NetCore v${{ bot.project.netCoreVersion }}"
              inputs:
                version: "${{ bot.project.netCoreVersion }}"

          # Evaluate dependencies source and version
          - template: evaluateDependenciesVariables.yml
            parameters:
              botType: "${{ bot.type }}"
              registry: "${{ bot.dependency.registry }}"
              version: "${{ bot.dependency.version }}"

          # Install dependencies in Microsoft.BotFramework.Composer.WebApp
          - template: installDependencies.yml
            parameters:
              project: 
                directory: "${{ bot.project.directory }}/runtime/azurewebapp/"
                name: "Microsoft.BotFramework.Composer.WebApp.csproj"
              registry: "$(DEPENDENCIESSOURCE)"
              version: "$(DEPENDENCIESVERSIONNUMBER)"
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Install dependencies in Microsoft.BotFramework.Composer.Functions
          - template: installDependencies.yml
            parameters:
              project: 
                directory: "${{ bot.project.directory }}/runtime/azurefunctions/"
                name: "Microsoft.BotFramework.Composer.Functions.csproj"
              registry: "$(DEPENDENCIESSOURCE)"
              version: "$(DEPENDENCIESVERSIONNUMBER)"
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Install dependencies in Microsoft.BotFramework.Composer.CustomAction
          - template: installDependencies.yml
            parameters:
              project:
                directory: "${{ bot.project.directory }}/runtime/customaction/"
                name: "Microsoft.BotFramework.Composer.CustomAction.csproj"
              registry: "$(DEPENDENCIESSOURCE)"
              version: "$(DEPENDENCIESVERSIONNUMBER)"
              packages:
                Microsoft.Bot.Builder.Dialogs.Adaptive

          # Install dependencies in Microsoft.BotFramework.Composer.Core
          - template: installDependencies.yml
            parameters:
              project: 
                directory: "${{ bot.project.directory }}/runtime/core/"
                name: "Microsoft.BotFramework.Composer.Core.csproj"
              registry: "$(DEPENDENCIESSOURCE)"
              version: "$(DEPENDENCIESVERSIONNUMBER)"
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Azure.Blobs
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Prepare DotNet deploy
          - task: AzureCLI@1
            displayName: "Prepare Deploy"
            inputs:
              azureSubscription: "${{ parameters.azureSubscription }}"
              scriptLocation: inlineScript
              inlineScript: "az bot prepare-deploy --lang Csharp --code-dir ${{ bot.project.directory }}/runtime/azurewebapp --proj-file-path Microsoft.BotFramework.Composer.WebApp.csproj --output json"

          # Build Bot
          - task: DotNetCoreCLI@2
            displayName: "Build"
            inputs:
              command: publish
              publishWebProjects: false
              projects: "${{ bot.project.directory }}/runtime/azurewebapp/Microsoft.BotFramework.Composer.WebApp.csproj"
              arguments: "-c release -o ${{ parameters.output.path }}"
              modifyOutputPath: false
              zipAfterPublish: false

          # Arrange composer folders & files
          - powershell: |
              $composerDialogs = "${{ parameters.output.path }}/ComposerDialogs"
              Remove-Item $composerDialogs -Recurse -ErrorAction Ignore

              Copy-Item -Path (Get-Item -Path ${{ bot.project.directory }}/* -Exclude ("runtime", "scripts", "*.ps1", "readme.md", "*.botproj", ".gitignore")).FullName -Destination $composerDialogs -Recurse -Force -Container
            displayName: "Prepare Composer"

          # Zip bot
          - powershell: |
              7z.exe a -tzip "${{ parameters.output.path }}/${{ parameters.output.zip }}.zip" "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ parameters.output.path }}/*" -aoa
            displayName: "Zip bot"

          # Create App Service and Bot Channel Registration
          - template: ../common/createAppService.yml
            parameters:
              appId: $(APPID)
              appInsight: "${{ parameters.appInsight }}"
              appSecret:  $(APPSECRET)
              appServicePlan: "${{ parameters.appServicePlan }}"
              appServicePlanRG: "${{ parameters.appServicePlanRG }}"
              azureSubscription: "${{ parameters.azureSubscription }}"
              botGroup: "${{ parameters.resourceGroup }}"
              botName: "${{ bot.name }}"
              botPricingTier: "${{ parameters.botPricingTier }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"
              templateFile: "build/templates/template-bot-resources.json"

          # Deploy bot
          - template: ../common/zipDeploy.yml
            parameters:
              azureSubscription: "${{ parameters.azureSubscription }}"
              botGroup: "${{ parameters.resourceGroup }}"
              botName: "${{ bot.name }}"
              source: "${{ parameters.output.path }}/${{ parameters.output.zip }}.zip"
              resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Create DirectLine Channel Hosts
          - ${{ if eq(bot.type, 'Host') }}:
            - template: ../common/createDirectLine.yml
              parameters:
                azureSubscription: "${{ parameters.azureSubscription }}"
                botGroup: "${{ parameters.resourceGroup }}"
                botName: "${{ bot.name }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"
