parameters:
  dependsOn: ''
  resourceGroup: ''
  bots: []
  output:
    path: 'build-composer'
    zip: 'build'

stages:
- ${{ each bot in parameters.bots }}:
  - stage: 'Deploy_${{ bot.name }}'
    ${{ if eq(bot.displayName, '') }}:
      displayName: '${{ bot.name }}'
    ${{ if ne(bot.displayName, '') }}:
      displayName: '${{ bot.displayName }}'
    dependsOn: '${{ parameters.dependsOn }}'
    jobs:
      - job: 'Deploy'
        displayName: 'Deploy steps'
        steps:
          # Delete Bot Resources
          - template: ../common/deleteResources.yml
            parameters:
              resourceGroup: '${{ parameters.resourceGroup }}'
              resourceName: '${{ bot.name }}'

          # Gets Bot App Registration credentials from KeyVault or Pipeline Variables
          - template: ../common/getAppRegistration.yml
            parameters:
              appId: ${{ bot.appId }}
              appSecret: ${{ bot.appSecret }}
              botName: '${{ bot.name }}'

          # Use Net Core version
          - ${{ if ne(bot.project.netCoreVersion, '') }}:
            - task: UseDotNet@2
              displayName: 'Use NetCore v${{ bot.project.netCoreVersion }}'
              inputs:
                version: '${{ bot.project.netCoreVersion }}'

          # Evaluate dependencies source and version
          - template: evaluateDependenciesVariables.yml
            parameters:
              ${{ if eq(bot.type, 'Host') }}:
                registry: "$env:DependenciesRegistryHosts"
                version: "$env:DependenciesVersionHosts"
              ${{ if eq(bot.type, 'Skill') }}:
                registry: "$env:DependenciesRegistrySkills"
                version: "$env:DependenciesVersionSkills"
              botType: '${{ bot.type }}'

          # Install dependencies in Microsoft.BotFramework.Composer.WebApp
          - template: installDependencies.yml
            parameters:
              source: "$(DependenciesSource)"
              version: "$(DependenciesVersionNumber)"
              project: 
                directory: '${{ bot.project.directory }}/runtime/azurewebapp/'
                name: 'Microsoft.BotFramework.Composer.WebApp.csproj'
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Install dependencies in Microsoft.BotFramework.Composer.Functions
          - template: installDependencies.yml
            parameters:
              source: "$(DependenciesSource)"
              version: "$(DependenciesVersionNumber)"
              project: 
                directory: '${{ bot.project.directory }}/runtime/azurefunctions/'
                name: 'Microsoft.BotFramework.Composer.Functions.csproj'
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Install dependencies in Microsoft.BotFramework.Composer.CustomAction
          - template: installDependencies.yml
            parameters:
              source: "$(DependenciesSource)"
              version: "$(DependenciesVersionNumber)"
              project:
                directory: '${{ bot.project.directory }}/runtime/customaction/'
                name: 'Microsoft.BotFramework.Composer.CustomAction.csproj'
              packages:
                Microsoft.Bot.Builder.Dialogs.Adaptive

          # Install dependencies in Microsoft.BotFramework.Composer.Core
          - template: installDependencies.yml
            parameters:
              source: "$(DependenciesSource)"
              version: "$(DependenciesVersionNumber)"
              project: 
                directory: '${{ bot.project.directory }}/runtime/core/'
                name: 'Microsoft.BotFramework.Composer.Core.csproj'
              packages:
                Microsoft.Bot.Builder
                Microsoft.Bot.Builder.AI.Luis
                Microsoft.Bot.Builder.AI.QnA
                Microsoft.Bot.Builder.ApplicationInsights
                Microsoft.Bot.Builder.Azure
                Microsoft.Bot.Builder.Azure.Blobs
                Microsoft.Bot.Builder.Dialogs.Adaptive
                Microsoft.Bot.Builder.Dialogs.Debugging
                Microsoft.Bot.Builder.Dialogs.Declarative
                Microsoft.Bot.Builder.Integration.ApplicationInsights.Core
                Microsoft.Bot.Builder.Integration.AspNet.Core
                Microsoft.Bot.Builder.Dialogs
                Microsoft.Bot.Connector

          # Prepare DotNet deploy
          - task: AzureCLI@1
            displayName: 'Prepare Deploy'
            inputs:
              azureSubscription: $(AzureSubscription)
              scriptLocation: inlineScript
              inlineScript: 'az bot prepare-deploy --lang Csharp --code-dir ${{ bot.project.directory }}/runtime/azurewebapp --proj-file-path Microsoft.BotFramework.Composer.WebApp.csproj --output json'

          # Build Bot
          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: publish
              publishWebProjects: false
              projects: '${{ bot.project.directory }}/runtime/azurewebapp/Microsoft.BotFramework.Composer.WebApp.csproj'
              arguments: '-c release -o ${{ parameters.output.path }}'
              modifyOutputPath: false
              zipAfterPublish: false

          # Arrange composer folders & files
          - powershell: |
              $composerDialogs = "${{ parameters.output.path }}/ComposerDialogs"
              Remove-Item $composerDialogs -Recurse -ErrorAction Ignore

              Copy-Item -Path (Get-Item -Path ${{ bot.project.directory }}/* -Exclude ('runtime', 'scripts', '*.ps1', 'readme.md', '*.botproj', '.gitignore')).FullName -Destination $composerDialogs -Recurse -Force -Container
            displayName: 'Prepare Composer'

          # Zip bot
          - powershell: |
              7z.exe a -tzip "${{ parameters.output.path }}/${{ parameters.output.zip }}.zip" "$(System.DefaultWorkingDirectory)/${{ parameters.output.path }}/*" -aoa
            displayName: 'Zip bot'

          # Create App Service and Bot Channel Registration
          - template: ../common/createAppService.yml
            parameters:
              appId: $(AppId)
              appSecret:  $(AppSecret)
              botName: '${{ bot.name }}'
              botGroup: '${{ parameters.resourceGroup }}'

          # Deploy bot
          - template: ../common/zipDeploy.yml
            parameters:
              botName: '${{ bot.name }}'
              botGroup: '${{ parameters.resourceGroup }}'
              source: "${{ parameters.output.path }}/${{ parameters.output.zip }}.zip"

          # Create DirectLine Channel Hosts
          - ${{ if eq(bot.type, 'Host') }}:
            - template: ../common/createDirectLine.yml
              parameters:
                botName: '${{ bot.name }}'
                botGroup: '${{ parameters.resourceGroup }}'
