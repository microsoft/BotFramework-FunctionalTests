parameters:
  - name: appInsight
    displayName: Azure Application Insight name
    type: string

  - name: appServicePlan
    displayName: App Service Plan name
    type: string

  - name: azureSubscription
    displayName: Azure Service Connection
    type: string

  - name: botPricingTier
    displayName: Bot Pricing Tier
    type: string

  - name: bots
    displayName: Bots
    type: object

  - name: buildFolder
    displayName: Build Folder
    type: string
    default: "build-dotnet"

  - name: connectionName
    displayName: OAuth Connection Name
    type: string

  - name: keyVault
    displayName: Key Vault name
    type: string

  - name: projectTag
    displayName: Tag for bot's application service
    type: string

  - name: resourceGroup
    displayName: Resource Group
    type: string

  - name: resourceSuffix
    displayName: Azure resources' name suffix
    type: string

  - name: sharedResourceGroup
    displayName: Shared Resource Group
    type: string

  - name: virtualNetwork
    displayName: Virtual network name
    type: string

stages:
- ${{ each bot in parameters.bots }}:
  - stage: "Deploy_${{ bot.name }}"
    ${{ if eq(bot.displayName, '') }}:
      displayName: "${{ bot.name }}"
    ${{ if ne(bot.displayName, '') }}:
      displayName: "${{ bot.displayName }}"
    dependsOn: "${{ bot.dependsOn }}"
    jobs:
      - job: "Deploy"
        ${{ if eq(bot.type, 'SkillV3') }}:
          variables:
            SolutionDir: "$(BUILD.SOURCESDIRECTORY)/Bots/DotNet/"
        displayName: "Deploy steps"
        steps:
          - powershell: |
              Write-Host ("parameters.appServicePlan: " + "${{ parameters.appServicePlan }}");
              Write-Host ("parameters.azureSubscription: " + "${{ parameters.azureSubscription }}");
              Write-Host ("parameters.connectionName: " + "${{ parameters.connectionName }}");
              Write-Host ("parameters.keyVault: " + "${{ parameters.keyVault }}");
              Write-Host ("parameters.resourceGroup: " + "${{ parameters.resourceGroup }}");
              Write-Host ("parameters.resourceSuffix: " + "${{ parameters.resourceSuffix }}");
              Write-Host ("bot.name: " + "${{ bot.name }}");
              Write-Host ("bot.project.directory: " + "${{ bot.project.directory }}");
              Write-Host ("bot.container.registry: " + "${{ bot.container.registry }}");
              Write-Host ("bot.type: " + "${{ bot.type }}");
              Write-Host ("bot.dependency.registry: " + "${{ bot.type }}");
              Write-Host ("bot.dependency.version: " + "${{ bot.type }}");
            displayName: "Show resource names"
            continueOnError: true

          # Delete Bot Resources
          - template: ../common/deleteResources.yml
            parameters:
              azureSubscription: "${{ parameters.azureSubscription }}"
              resourceGroup: "${{ parameters.resourceGroup }}"
              resourceName: "${{ bot.name }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Gets Bot App Registration credentials from KeyVault or Pipeline Variables
          - template: ../common/getAppRegistration.yml
            parameters:
              appId: ${{ bot.appId }}
              appSecret: ${{ bot.appSecret }}
              azureSubscription: "${{ parameters.azureSubscription }}"
              botName: "${{ bot.name }}"
              keyVault: "${{ parameters.keyVault }}"

          # Use Net Core version
          - ${{ if ne(bot.project.netCoreVersion, '') }}:
            - task: UseDotNet@2
              displayName: "Use NetCore v${{ bot.project.netCoreVersion }}"
              inputs:
                version: "${{ bot.project.netCoreVersion }}"

          # Use NuGet
          - task: NuGetToolInstaller@1
            displayName: "Use NuGet"
          
          # Prepare appsettings.json file, deleting all the declared skills, so it uses only the settings define in Azure
          - ${{ if eq(bot.type, 'Host') }}:
            - task: PowerShell@2
              displayName: 'Prepare App Settings'
              inputs:
                targetType: inline
                workingDirectory: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ bot.project.directory }}'
                failOnStderr: true
                script: |
                  $file = "./appsettings.json"
                  $content = Get-Content -Raw $file | ConvertFrom-Json
                  $content.BotFrameworkSkills = @()
                  $content | ConvertTo-Json | Set-Content $file

          # Evaluate dependencies source and version
          - template: ../../common/dotnet/evaluateDependenciesVariables.yml
            parameters:
              botType: "${{ bot.type }}"
              registry: "${{ bot.dependency.registry }}"
              version: "${{ bot.dependency.version }}"

          # Build Bot
          - ${{ if in(bot.type, 'Host', 'Skill', 'ComposerHost', 'ComposerSkill') }}:
            - task: DotNetCoreCLI@2
              displayName: "Build"
              inputs:
                command: publish
                publishWebProjects: false
                projects: "${{ bot.project.directory }}/${{ bot.project.name }}"
                arguments: "--output $(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ parameters.buildFolder }}/${{ bot.name }}"
                modifyOutputPath: false
              env:
                BotBuilderVersion: "$(DEPENDENCIESVERSIONNUMBER)"
                BotBuilderRegistry: "$(DEPENDENCIESSOURCE)"

          # Start DotNet v3 Install & Build
          - ${{ if eq(bot.type, 'SkillV3') }}:
            # Run NuGet restore SkillV3
            - task: NuGetCommand@2
              displayName: "NuGet restore"
              inputs:
                restoreSolution: "${{ bot.project.directory }}/${{ bot.project.name }}"
                restoreDirectory: "$(SOLUTIONDIR)packages"

            # Install dependencies
            - template: installDependenciesV3.yml
              parameters:
                registry: "$(DEPENDENCIESSOURCE)"
                version: "$(DEPENDENCIESVERSIONNUMBER)"
                project: "${{ bot.project }}"
                packages:
                  Microsoft.Bot.Builder
                  Microsoft.Bot.Builder.History
                  Microsoft.Bot.Connector

            # Build bot
            - task: MSBuild@1
              displayName: "Build"
              inputs:
                solution: "${{ bot.project.directory }}/${{ bot.project.name }}"
                vsVersion: 16.0
                platform: "$(BUILDPLATFORM)"
                configuration: "$(BUILDCONFIGURATION)"

            # Get BotBuilder package version
            - task: PowerShell@2
              displayName: 'Get BotBuilder Version'
              inputs:
                targetType: inline
                failOnStderr: true
                script: |
                  $result = @(Get-ChildItem "$(SOLUTIONDIR)packages\Microsoft.Bot.Builder.[0-9]*" -directory | Sort LastWriteTime -Descending)
                  $version = $result[0].Name.Replace("Microsoft.Bot.Builder.", "")
                  Write-Host "##vso[task.setvariable variable=DependenciesVersionNumber]$($version)"

            # Zip bot
            - task: ArchiveFiles@2
              displayName: 'Zip bot'
              inputs:
                rootFolderOrFile: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ bot.project.directory }}'
                includeRootFolder: false
                archiveType: 'zip'
                archiveFile: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ parameters.buildFolder }}/${{ bot.name }}/${{ bot.name }}.zip'
                replaceExistingArchive: true
                verbose: true
          # End of DotNet v3 Install & Build

          # Tag BotBuilder package version
          - template: ../../common/tagBotBuilderVersion.yml
            parameters:
              ${{ if eq(bot.displayName, '') }}:
                name: "${{ bot.name }}"
              ${{ if ne(bot.displayName, '') }}:
                name: "${{ bot.displayName }}"
              version: "$(DEPENDENCIESVERSIONNUMBER)"

          # Upload zip to artifacts in case we want to debug it
          - task: PublishBuildArtifacts@1
            displayName: 'Publish zip package'
            inputs:
              pathToPublish: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ parameters.buildFolder }}/${{ bot.name }}/${{ bot.name }}.zip"
              artifactName: dotnet-$(BUILD.BUILDID)

          # Create App Service and Bot Channel Registration
          - template: ../common/createAppService.yml
            parameters:
              appId: $(APPID)
              appInsight: "${{ parameters.appInsight }}"
              appSecret: $(APPSECRET)
              appServicePlan: "${{ parameters.appServicePlan }}"
              azureSubscription: "${{ parameters.azureSubscription }}"
              botGroup: "${{ parameters.resourceGroup }}"
              botName: "${{ bot.name }}"
              botPricingTier: "${{ parameters.botPricingTier }}"
              projectTag: "${{ parameters.projectTag }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"
              sharedResourceGroup: "${{ parameters.sharedResourceGroup }}"
              templateFile: "build/templates/template-bot-resources.json"
              virtualNetwork: "${{ parameters.virtualNetwork }}"
              virtualNetworkSubnet: "dotnet"

          # Deploy bot
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : ${{ bot.name }}-$(BUILD.BUILDID)'
            inputs:
              azureSubscription: "${{ parameters.azureSubscription }}"
              appName: '${{ bot.name }}${{ parameters.resourceSuffix }}-$(BUILD.BUILDID)'
              resourceGroupName: '${{ parameters.resourceGroup }}'
              package: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ parameters.buildFolder }}/${{ bot.name }}/${{ bot.name }}.zip'
              deploymentMethod: runFromPackage

          # Configure OAuth
          - ${{ if in(bot.type, 'Skill', 'ComposerSkill') }}:
            - template: ../common/configureOAuth.yml
              parameters:
                appId: $(APPID)
                appSecret: $(APPSECRET)
                azureSubscription: "${{ parameters.azureSubscription }}"
                botGroup: "${{ parameters.resourceGroup }}"
                botName: "${{ bot.name }}"
                connectionName: "${{ parameters.connectionName }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"
