parameters:
  - name: appInsight
    displayName: Azure Application Insight name
    type: string

  - name: appServicePlan
    displayName: App Service Plan name
    type: string

  - name: azureSubscription
    displayName: Azure Service Connection
    type: string

  - name: bots
    displayName: Bots
    type: object

  - name: botPricingTier
    displayName: Bot Pricing Tier
    type: string

  - name: connectionName
    displayName: OAuth Connection Name
    type: string

  - name: dependsOn
    displayName: Depends On
    type: string

  - name: keyVault
    displayName: Key Vault name
    type: string

  - name: projectTag
    displayName: Tag for bot's application service
    type: string

  - name: resourceGroup
    displayName: Resource Group
    type: string

  - name: resourceSuffix
    displayName: Azure resources' name suffix
    type: string

  - name: sharedResourceGroup
    displayName: Shared Resource Group
    type: string

  - name: virtualNetwork
    displayName: Virtual network name
    type: string

stages:
- ${{ each bot in parameters.bots }}:
  - stage: "Deploy_${{ bot.name }}"
    ${{ if eq(bot.displayName, '') }}:
      displayName: "${{ bot.name }}"
    ${{ if ne(bot.displayName, '') }}:
      displayName: "${{ bot.displayName }}"
    dependsOn: "${{ parameters.dependsOn }}"
    jobs:
      - job: "Deploy"
        pool:
          vmImage: "ubuntu-latest"
        displayName: "Deploy steps"
        steps:
          # Delete Bot Resources
          - template: ../common/deleteResources.yml
            parameters:
              azureSubscription: "${{ parameters.azureSubscription }}"
              resourceGroup: "${{ parameters.resourceGroup }}"
              resourceName: "${{ bot.name }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"

          # Gets Bot App Registration credentials from KeyVault or Pipeline Variables
          - template: ../common/getAppRegistration.yml
            parameters:
              appId: ${{ bot.appId }}
              appSecret: ${{ bot.appSecret }}
              appType: ${{ bot.appType }}
              azureSubscription: "${{ parameters.azureSubscription }}"
              botName: "${{ bot.name }}"
              keyVault: "${{ parameters.keyVault }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"
              sharedResourceGroup: "${{ parameters.sharedResourceGroup }}"

          # Prepare .env file, deleting all the declared skills, so it uses only the settings define in Azure
          - ${{ if eq(bot.type, 'Host') }}:
            - task: PowerShell@2
              displayName: "Prepare .env file"
              inputs:
                targetType: inline
                workingDirectory: '$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ bot.project.directory }}'
                failOnStderr: true
                script: |
                  $file = "./.env"
                  $content = Get-Content $file
                  $content | ForEach-Object {
                    $line = $_
                    if ($line.Trim().Length -gt 0 -and -not $line.Trim().ToLower().StartsWith("skill_")) {
                      $line
                    }
                  } | Set-Content $file;

          # Evaluate dependencies source and version
          - template: evaluateDependenciesVariables.yml
            parameters:
              botType: "${{ bot.type }}"
              source: "${{ bot.project.directory }}"
              registry: "${{ bot.dependency.registry }}"
              version: "${{ bot.dependency.version }}"

          # Tag BotBuilder package version
          - template: ../../common/tagBotBuilderVersion.yml
            parameters:
              ${{ if eq(bot.displayName, '') }}:
                name: "${{ bot.name }}"
              ${{ if ne(bot.displayName, '') }}:
                name: "${{ bot.displayName }}"
              version: "$(DEPENDENCIESVERSIONNUMBER)"

          - task: AzureCLI@2
            displayName: "Build and Push Container"
            inputs:
              azureSubscription: "${{ parameters.azureSubscription }}"
              addSpnToEnvironment: true
              failOnStandardError: true
              scriptType: pscore
              scriptLocation: inlineScript
              workingDirectory: $(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ bot.project.directory }}
              inlineScript: |
                az acr login --name ${{ bot.container.registry }} --username="$env:SERVICEPRINCIPALID" --password="$env:SERVICEPRINCIPALKEY"
                $container = "${{ bot.container.registry }}.azurecr.io/${{ bot.name }}:v$(DEPENDENCIESVERSIONNUMBER)";

                # Copy Dockerfile
                copy "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/Bots/Python/Dockerfile" .

                # Delete Container
                $repositories = az acr repository list --name ${{ bot.container.registry }} | ConvertFrom-Json;
                if($repositories -and $repositories.Contains("${{ bot.name }}")){
                  "Container repository removed: '${{ bot.container.registry }}.azurecr.io/${{ bot.name }}'.";
                  az acr repository delete --name ${{ bot.container.registry }} --repository ${{ bot.name }} --yes --output none
                }

                # Build and Push Container
                docker build --tag $container .
                docker push $container

                # Export Bot
                $containerId = docker create $container
                docker cp "$($containerId):/app" .

          # Zip bot
          - task: ArchiveFiles@2
            displayName: "Zip bot"
            inputs:
              rootFolderOrFile: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ bot.project.directory }}/app"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ bot.name }}.zip"
              replaceExistingArchive: true
              verbose: true

          # Upload zip to artifacts in case we want to debug it
          - task: PublishBuildArtifacts@1
            displayName: "Publish zip package"
            inputs:
              pathToPublish: "$(SYSTEM.DEFAULTWORKINGDIRECTORY)/${{ bot.name }}.zip"
              artifactName: python-$(BUILD.BUILDID)

          # Create App Service and Azure Bot
          - template: ../common/createAppService.yml
            parameters:
              appId: $(APPID)
              appSecret: $(APPSECRET)
              appInsight: "${{ parameters.appInsight }}"
              appServicePlan: "${{ parameters.appServicePlan }}"
              appType: "${{ bot.appType }}"
              azureSubscription: "${{ parameters.azureSubscription }}"
              botGroup: "${{ parameters.resourceGroup }}"
              botName: "${{ bot.name }}"
              botPricingTier: "${{ parameters.botPricingTier }}"
              container:
                registry: "${{ bot.container.registry }}"
                repository: "${{ bot.name }}"
                tag: "v$(DEPENDENCIESVERSIONNUMBER)"
                port: "${{ bot.container.port }}"
                command: "${{ bot.container.command }}"
              projectTag: "${{ parameters.projectTag }}"
              resourceSuffix: "${{ parameters.resourceSuffix }}"
              sharedResourceGroup: "${{ parameters.sharedResourceGroup }}"
              templateFile: "build/templates/template-container-linux-bot-resources.json"
              virtualNetwork: "${{ parameters.virtualNetwork }}"
              virtualNetworkSubnet: "python"

          # Configure OAuth
          - ${{ if eq(bot.type, 'Skill') }}:
            - template: ../common/configureOAuth.yml
              parameters:
                appId: $(APPID)
                appSecret: $(APPSECRET)
                azureSubscription: "${{ parameters.azureSubscription }}"
                botGroup: "${{ parameters.resourceGroup }}"
                botName: "${{ bot.name }}"
                connectionName: "${{ parameters.connectionName }}"
                resourceSuffix: "${{ parameters.resourceSuffix }}"
