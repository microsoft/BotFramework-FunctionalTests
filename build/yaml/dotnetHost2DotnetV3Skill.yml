#
# Build a C# Host bot and a v3 C# Skill bot. Deploy them and run functional tests.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BuildConfiguration: 'Debug'
  BuildPlatform: 'AnyCPU'
  runCodesignValidationInjection: false
  skipComponentGovernanceDetection: true
  # AzureSubscription: define in Azure
  # BotBuilderPackageVersionHost: (optional) define in Azure
  # BotBuilderPackageVersionSkill: (optional) define in Azure
  # DeleteResourceGroup: (optional) define in Azure
  # DotNetDotNetV3HostAppId: define in Azure
  # DotNetDotNetV3HostAppSecret: define in Azure
  # DotNetDotNetV3HostBotName: define in Azure
  # DotNetDotNetV3SkillAppId: define in Azure
  # DotNetDotNetV3SkillAppSecret: define in Azure
  # DotNetDotNetV3SkillBotName: define in Azure
  # NetCoreSdkVersionHost: define in Azure
  # RegistryUrlHost: (optional) define in Azure
  # RegistryUrlSkill: (optional) define in Azure
  # TestFilter: (optional) define in Azure. Example: '&TestCategory!=SkipForV3Bots'

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), ne(variables['DeleteResourceGroup'], 'false'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(DotNetDotNetV3HostBotName)
        SkillBotName: $(DotNetDotNetV3SkillBotName)
      steps:
      - template: cleanResourcesStep.yml

- stage: Build
  dependsOn: []    # makes this run in parallel
  jobs:
    - job: Validate_Host_NetCore_Version
      variables:
        Parameters.netCoreSdkVersion: $(NetCoreSdkVersionHost)
      steps:
      - template: dotnetValidateNetCoreSdkVersion.yml

    - job: Build_Host_Bot
      variables:
        Registry: $[variables.RegistryUrlHost]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        BotType: Host
      steps:
      - template: dotnetSetPaths.yml
      - template: dotnetInstallPackagesSteps.yml
      - template: dotnetBuildSteps.yml
      - template: dotnetTagBotBuilderVersion.yml

    - job: Build_Skill_Bot
      variables:
        Registry: $[variables.RegistryUrlSkill]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.solution: 'Bots/DotNet/Skills/CodeFirst/EchoSkillBot-v3/EchoSkillBot-v3.csproj'
        Parameters.packages: 'Bots/DotNet/Skills/CodeFirst/EchoSkillBot-v3'
      steps:
      - template: dotnetV3BuildSteps.yml
      - template: dotnetV3TagBotBuilderVersion.yml

- stage: Deploy
  dependsOn:
  - Prepare
  - Build
  condition: succeeded('Build')
  jobs:
    - job: Deploy_Host
      variables:
        HostBotName: $(DotNetDotNetV3HostBotName)
        SkillBotName: $(DotNetDotNetV3SkillBotName)
        SkillAppId: $(DotNetDotNetV3SkillAppId)
        BotName: $(DotNetDotNetV3HostBotName)
        BotGroup: '$(BotName)-RG'
        DeployAppId: $(DotNetDotNetV3HostAppId)
        DeployAppSecret: $(DotNetDotNetV3HostAppSecret)
        Registry: $[variables.RegistryUrlHost]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        BotType: Host
      steps:
      - template: dotnetSetPaths.yml
      - template: dotnetSetConfigFileSteps.yml
      - template: dotnetDeploySteps.yml

    - job: Deploy_Skill
      variables:
        BotName: $(DotNetDotNetV3SkillBotName)
        BotGroup: '$(BotName)-RG'
        DeployAppId: $(DotNetDotNetV3SkillAppId)
        DeployAppSecret: $(DotNetDotNetV3SkillAppSecret)
        Registry: $[variables.RegistryUrlSkill]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.solution: 'Bots/DotNet/Skills/CodeFirst/EchoSkillBot-v3/EchoSkillBot-v3.csproj'
        Parameters.packages: 'Bots/DotNet/Skills/CodeFirst/EchoSkillBot-v3'
        Parameters.sourceLocation: 'Bots/DotNet/Skills/CodeFirst/EchoSkillBot-v3/'
      steps:
      - template: dotnetV3DeploySteps.yml

- stage: Test
  dependsOn: Deploy
  condition: succeeded('Deploy')
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(DotNetDotNetV3HostBotName)
        Parameters.project: 'Tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        DefaultTestFilter: ''
        DotNetTestFilter: $[ coalesce( variables['TestFilter'], variables['DefaultTestFilter'] ) ]
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(or(succeeded('Build'), failed('Prepare')), ne(variables['DeleteResourceGroup'], 'false'))
  jobs:
    - job: Delete_RG
      steps:
      - checkout: none  # Don't sync sources
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(DotNetDotNetV3HostBotName)-RG" --yes --no-wait
           call az group delete -n "$(DotNetDotNetV3SkillBotName)-RG" --yes --no-wait
