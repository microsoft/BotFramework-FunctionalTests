#
# Deploy a Python Host bot and a JS Skill bot and run functional tests. (No build stage.)
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BuildConfiguration: 'Debug'
  BuildPlatform: 'any cpu'
  runCodesignValidationInjection: false
  skipComponentGovernanceDetection: true
  # AzureDeploymentPassword: define in Azure
  # AzureDeploymentUser: define in Azure
  # AzureSubscription: define in Azure
  # BotBuilderPackageVersionHost: (optional) define in Azure
  # BotBuilderPackageVersionSkill: (optional) define in Azure
  # DeleteResourceGroup: (optional) define in Azure
  # PyJsHostAppId: define in Azure
  # PyJsHostAppSecret: define in Azure
  # PyJsHostBotName: define in Azure
  # PyJsSkillAppId: define in Azure
  # PyJsSkillAppSecret: define in Azure
  # PyJsSkillBotName: define in Azure
  # RegistryUrlHost: (optional) define in Azure
  # RegistryUrlSkill: (optional) define in Azure
  # TestFilter: (optional) define in Azure. Example: '&TestCategory!=SkipForV3Bots'

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), ne(variables['DeleteResourceGroup'], 'false'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(PyJsHostBotName)
        SkillBotName: $(PyJsSkillBotName)
      steps:
      - template: cleanResourcesStep.yml

- stage: Deploy
  dependsOn:
  - Prepare
  condition: in(dependencies.Prepare.result, 'Succeeded', 'Skipped')
  jobs:
    - job: Deploy_Host
      variables:
        HostBotName: $(PyJsHostBotName)
        SkillBotName: $(PyJsSkillBotName)
        SkillAppId: $(PyJsSkillAppId)
        BotName: $(PyJsHostBotName)
        BotGroup: '$(BotName)-RG'
        DeployAppId: $(PyJsHostAppId)
        DeployAppSecret: $(PyJsHostAppSecret)
        Registry: $[variables.RegistryUrlHost]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        Parameters.sourceLocation: 'Bots/Python/Consumers/CodeFirst/SimpleHostBot'
        TemplateLocation: 'Bots/Python/Consumers/CodeFirst/SimpleHostBot/deploymentTemplates/template-with-new-rg.json'
      steps:
      - template: pythonSetConfigFileSteps.yml
      - template: pythonDeployStepsNewRG.yml

    - job: Deploy_Skill
      variables:
        BotName: $(PyJsSkillBotName)
        BotGroup: '$(BotName)-RG'
        DeployAppId: $(PyJsSkillAppId)
        DeployAppSecret: $(PyJsSkillAppSecret)
        Registry: $[variables.RegistryUrlSkill]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.sourceLocation: 'Bots/JavaScript/Skills/CodeFirst/EchoSkillBot'
        TemplateLocation: 'Bots/JavaScript/Skills/CodeFirst/EchoSkillBot/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - template: javascriptDeploySteps.yml

    - job: Configure_OAuth
      dependsOn: Deploy_Skill
      steps:
      - task: AzureCLI@1
        displayName: 'Configure skill OAuth connection'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az bot show -g "$(PyJsSkillBotName)-RG" -n "$(PyJsSkillBotName)"
           call az bot authsetting create -g "$(PyJsSkillBotName)-RG" -n "$(PyJsSkillBotName)" -c TestOAuthProvider --client-id "$(PyJsSkillAppId)" --client-secret '$(PyJsSkillAppSecret)'' --service "oauth2" --provider-scope-string '""' --parameters authorizationUrl=https://webjobs.botframework.com/api/testauthprovider/authorize tokenUrl=https://webjobs.botframework.com/api/testauthprovider/token refreshUrl=https://webjobs.botframework.com/api/testauthprovider/refresh clientId="$(PyJsSkillAppId)" clientSecret="$(PyJsSkillAppSecret)"
        condition: always()

- stage: Test
  dependsOn: Deploy
  condition: succeeded('Deploy')
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(PyJsHostBotName)
        Parameters.project: 'Tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        DefaultTestFilter: ''
        DotNetTestFilter: $[ coalesce( variables['TestFilter'], variables['DefaultTestFilter'] ) ]
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
  jobs:
    - job: Delete_RG
      steps:
      - checkout: none  # Don't sync sources
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(PyJsHostBotName)-RG" --yes --no-wait
           call az group delete -n "$(PyJsSkillBotName)-RG" --yes --no-wait
