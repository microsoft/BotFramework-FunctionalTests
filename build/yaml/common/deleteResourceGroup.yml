parameters:
- name: azureSubscription
  displayName: Azure Service Connection
  type: string

- name: name
  displayName: Resource Group name
  type: string

steps:
  - task: AzureCLI@2
    displayName: "Delete pre-existing Resource Group"
    inputs:
      azureSubscription: "${{ parameters.azureSubscription }}"
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $Group = "${{ parameters.name }}";

        function DeleteWebApps {
          param (
            $ResourceGroup,
            $TryLimit = 3,
            $TryCount = 1
          )
          
          if ($TryCount -gt $TryLimit) {
            Write-Host "  - [$TryLimit/$TryLimit] Retry limit reached! Finishing the deletion process.";
            return $false;
          }
          
          $WebApps = az webapp list --resource-group $ResourceGroup | ConvertFrom-Json

          if (-not $WebApps) {
            Write-Host "  - All Web Apps were successfully deleted!";
            return $true;
          }

          Write-Host "  - [$TryCount/$TryLimit] Preparing to delete Web Apps under the Resource Group...";
          $WebApps | ForEach-Object -Parallel {
            $ResourceGroup = $using:ResourceGroup;

            $WebApp = $_;
            $output = az webapp delete --name $WebApp.name --resource-group $ResourceGroup --keep-empty-plan 2>&1
            Write-Host "    - Deleting '$($WebApp.name)'...";
            if ($output) { 
              Write-Host  "    $output";
            }
          }

          Start-Sleep -Seconds 3; 
          return (DeleteWebApps -ResourceGroup $ResourceGroup -TryLimit $TryLimit -TryCount ($TryCount + 1))
        }

        Write-Host "Looking for the Resource Group '$Group'...";
        if ((az group exists -n $Group) -eq "true") {
          Write-Host "  - Found pre-existing Resource Group!";
          $DeletedWebApps = DeleteWebApps -ResourceGroup $Group;

          if ($DeletedWebApps -eq $true) {
            Write-Host "  - Proceeding to the delete the Resource Group...";
            az group delete -n $Group --yes --no-wait
            az group wait --deleted --interval 15 --timeout 600 --resource-group $Group
            Write-Host "    - Resource Group successfully deleted!";
          }
          else {
            Write-Host "  - Unable to delete the Resource Group.";
          }
        }
        else {
          Write-Host "  - No pre-existing Resource Group found!";
        }
