parameters:
- name: azureSubscription
  displayName: Azure Service Connection
  type: string

- name: name
  displayName: Resource Group name
  type: string

steps:
  - task: AzureCLI@2
    displayName: "Delete pre-existing Resource Group"
    inputs:
      azureSubscription: "${{ parameters.azureSubscription }}"
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $Group = "${{ parameters.name }}";

        function DeleteWebApps {
          param (
            [String] $ResourceGroup,
            [Int] $TryLimit = 3,
            [Int] $TryCount = 1,
            [System.Collections.Concurrent.ConcurrentDictionary[string, object]] $FailedWebApps = [System.Collections.Concurrent.ConcurrentDictionary[string, object]]::new()
          )

          # Retry the Web App query in case it fails to retrive the full list.
          for ($i = 1; $i -lt ($TryLimit + 1); $i++) {
            $WebApps = az webapp list --resource-group $ResourceGroup | ConvertFrom-Json
            if ($WebApps) {
              Write-Host "  - Total of $($WebApps.Count) Web Apps were found!";
              break;
            }
            elseif ($i -eq $TryLimit) {
              Write-Host "  - [$($i)/$($TryLimit)] No more Web Apps were found!";
            }
            else {
              Write-Host "  - [$($i)/$($TryLimit)] Looking for more Web Apps!";
            }
            Start-Sleep -Seconds 3;
          }

          if (-not $WebApps) {
            if (-not $FailedWebApps.IsEmpty) {
              Write-Host "  - Still there are Web Apps that failed, retrying the process!";
              Write-Host $(@($FailedWebApps.Keys | ForEach-Object { "    - $($_)" }) -join "`n");
              $WebApps = @($FailedWebApps.ToArray().Value);
            }
            else {
              return $true;
            }
          }

          if ($TryCount -gt $TryLimit) {
            Write-Host "  - [$TryLimit/$TryLimit] Retry limit reached! Finishing the deletion process.";
            return $false;
          }

          Write-Host "  - [$TryCount/$TryLimit] Preparing to delete Web Apps under the Resource Group...";
          $WebApps | ForEach-Object -ThrottleLimit 3 -Parallel {
            $FailedWebApps = $using:FailedWebApps;
            $ResourceGroup = $using:ResourceGroup;

            $WebApp = $_;
            $Output = az webapp delete --name $WebApp.name --resource-group $ResourceGroup --keep-empty-plan --only-show-errors 2>&1
            Write-Host "    - Deleting '$($WebApp.name)'...";
            if ($Output) {
              if ("$Output".Trim().StartsWith("ERROR")) {
                $FailedWebApps.TryAdd($WebApp.name, $WebApp) 1>$null;
              }
              Write-Host  "      $Output";
            }
            else {
              [System.Management.Automation.PSReference]$outVariable = @{};
              $FailedWebApps.TryRemove($WebApp.name, [ref] $outVariable) 1>$null;
            }
          }

          Start-Sleep -Seconds 10;
          return DeleteWebApps -ResourceGroup $ResourceGroup -TryLimit $TryLimit -TryCount ($TryCount + 1) -FailedWebApps $FailedWebApps
        }

        Write-Host "Looking for the Resource Group '$Group'...";
        if ((az group exists -n $Group) -eq "true") {
          Write-Host "  - Found pre-existing Resource Group!";
          $DeletedWebApps = DeleteWebApps -ResourceGroup $Group -TryLimit 5;

          if ($DeletedWebApps -eq $true) {
            Write-Host "  - Proceeding to the delete the Resource Group...";
            az group delete -n $Group --yes --no-wait
            az group wait --deleted --interval 15 --timeout 600 --resource-group $Group
            Write-Host "    - Resource Group successfully deleted!";
          }
          else {
            Write-Host "  - Unable to delete the Resource Group.";
          }
        }
        else {
          Write-Host "  - No pre-existing Resource Group found!";
        }
