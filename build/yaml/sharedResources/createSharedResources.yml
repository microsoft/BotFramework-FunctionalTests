#
# Creates the shared resources needed for the Skills Functional Tests.
#

name: $(Build.BuildId)
trigger: none
pr: none

pool:
  vmImage: 'windows-2019'

variables:
  AppInsights: 'bffnappinsights$($env:ResourceSuffix)'
  AppServicePlanLinux: 'bffnbotsappservicelinux$($env:ResourceSuffix)'
  AppServicePlanWindows: 'bffnbotsappservicewin$($env:ResourceSuffix)'
  CosmosDB: 'bffnbotstatedb$($env:ResourceSuffix)'
  KeyVault: 'bffnbotkeyvault$($env:ResourceSuffix)'
  # AzureSubscription: define in Azure
  # KeyVaultObjectId: define in Azure
  # ResourceGroupName: define in Azure
  # AppServicePlanPricingTier: (optional) define in Azure
  # ResourceSuffix: (optional) define in Azure

stages:
- stage: Create_Resource_Group_Windows
  displayName: Create Resource Group (Windows)
  jobs:
    - job: Create_Resource_Group_Windows
      displayName: 'Create steps'
      steps:
      - checkout: none
      - task: AzureCLI@2
        displayName: 'Create $(ResourceGroupName)'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: 'az group create --name "$(ResourceGroupName)" --location "westus"'

- stage: Create_Resource_Group_Linux
  displayName: Create Resource Group (Linux)
  dependsOn: []
  jobs:
    - job: Create_Resource_Group_Linux
      displayName: 'Create steps'
      steps:
      - checkout: none
      - task: AzureCLI@2
        displayName: 'Create $(ResourceGroupName)-linux'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: 'az group create --name "$(ResourceGroupName)-linux" --location "westus"'

- stage: Create_CosmosDB
  displayName: Create CosmosDB
  dependsOn: Create_Resource_Group_Windows
  jobs:
    - job: Deploy_Cosmos_DB
      displayName: 'Deploy steps'
      steps:
      - task: AzureCLI@2
        displayName: 'Deploy CosmosDB'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: 'az deployment group create --name "$(CosmosDB)" --resource-group "$(ResourceGroupName)" --template-file build/templates/template-cosmosdb-resources.json --parameters accountName="$(CosmosDB)" databaseName="$(CosmosDB)"'

- stage: Create_Key_Vault
  displayName: Create Key Vault
  dependsOn: Create_Resource_Group_Windows
  jobs:
    - job: Deploy_Key_Vault
      displayName: 'Deploy steps'
      steps:
      - task: AzureCLI@2
        displayName: 'Deploy Key Vault'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: 'az deployment group create --name "$(KeyVault)" --resource-group "$(ResourceGroupName)" --template-file build/templates/template-key-vault-resources.json --parameters keyVaultName="$(KeyVault)" objectId="$(KeyVaultObjectId)"'

- stage: Create_App_Registrations
  displayName: Create App Registrations
  dependsOn: Create_Key_Vault
  jobs:
    - job: Create_App_Registrations
      displayName: 'Create steps'
      steps:
      - checkout: none
      - template: createAppRegistrations.yml
        parameters: 
          keyVault: '$(KeyVault)'

- stage: Create_App_Service_Plan_Windows
  displayName: Create App Service Plan (Windows)
  dependsOn: Create_Resource_Group_Windows
  jobs:
    - job: Deploy_App_Service_Plan_Windows
      displayName: 'Deploy steps'
      steps:
      - task: AzureCLI@2
        displayName: 'Deploy App Service Plan (Windows)'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            $appServicePlanPricingTier = if($env:AppServicePlanPricingTier) { "newAppServicePlanSku=$env:AppServicePlanPricingTier" };
            
            az deployment group create --name "$(AppServicePlanWindows)" --resource-group "$(ResourceGroupName)" --template-file build/templates/template-service-plan-windows-resources.json --parameters $appServicePlanPricingTier newAppServicePlanName="$(AppServicePlanWindows)"

- stage: Create_App_Service_Plan_Linux
  displayName: Create App Service Plan (Linux)
  dependsOn: Create_Resource_Group_Linux
  jobs:
    - job: Deploy_App_Service_Plan_Linux
      displayName: 'Deploy steps'
      steps:
      - task: AzureCLI@2
        displayName: 'Deploy App Service Plan (Linux)'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            $appServicePlanPricingTier = if($env:AppServicePlanPricingTier) { "newAppServicePlanSku=$env:AppServicePlanPricingTier" };

            az deployment group create --name "$(AppServicePlanLinux)" --resource-group "$(ResourceGroupName)-linux" --template-file build/templates/template-service-plan-linux-resources.json --parameters $appServicePlanPricingTier newAppServicePlanName="$(AppServicePlanLinux)"

- stage: Create_App_Insights
  displayName: Create App Insights
  dependsOn: Create_Resource_Group_Windows
  jobs:
    - job: Deploy_App_Insights
      displayName: 'Deploy steps'
      steps:
      - task: AzureCLI@2
        displayName: 'Deploy App Insights'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: 'az deployment group create --name "$(AppInsights)" --resource-group "$(ResourceGroupName)" --template-file build/templates/template-app-insights-resources.json --parameters appInsightsName="$(AppInsights)"'
