parameters:
  keyVault: ''

steps:
  - task: AzureCLI@2
    displayName: 'Create App Registrations & Store into KeyVault'
    inputs:
      azureSubscription: $(AzureSubscription)
      addSpnToEnvironment: true
      failOnStandardError: true
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        # Using Microsoft Graph REST API to create App Registrations (https://docs.microsoft.com/en-us/graph/api/application-post-applications) instead of Azure CLI due to Azure Active Directory Graph API has been deprecated and still in a migration process to Microsoft Graph API, more information can be found in this link (https://github.com/Azure/azure-cli/issues/12946).

        function GetToken() {
          # Get Token

          $body = @{
            grant_type    = "client_credentials";
            scope         = "https://graph.microsoft.com/.default";
            client_id     = $env:servicePrincipalId;
            client_secret = $env:servicePrincipalKey;
          }

          Invoke-WebRequest -Uri "https://login.microsoftonline.com/$($env:tenantId)/oauth2/v2.0/token" -Method "POST" -Body $body | ConvertFrom-Json;
        }

        function CreateAppRegistration($token, $appName) {
          # Create App Registration

          $headers = @{
            Authorization = "Bearer " + $token.access_token
          }

          $body = @{
            displayName    = $appName;
            signInAudience = "AzureADandPersonalMicrosoftAccount"
          } | ConvertTo-Json;

          $app = Invoke-WebRequest -Uri "https://graph.microsoft.com/v1.0/applications" -Method "POST" -Headers $headers -Body $body -ContentType "application/json" | ConvertFrom-Json;
          
          # Assign a secret to the App Registration

          $body = @{
            displayName = $app.appId;
          } | ConvertTo-Json;

          $secret = Invoke-WebRequest -Uri "https://graph.microsoft.com/v1.0/applications/$($app.id)/addPassword" -Method "POST" -Headers $headers -Body $body -ContentType "application/json" | ConvertFrom-Json;

          $app | Add-Member -MemberType NoteProperty -Name secret -Value $secret.secretText;

          $app;
        }

        function SaveAppRegistrationIntoKeyVault($vaultName, $bot, $app) {
          # Store secrets into KeyVault

          $secrets = @(
            @{ name = $bot.objectId; value = $app.id },
            @{ name = $bot.appId; value = $app.appId },
            @{ name = $bot.appSecret; value = $app.secret }
          )

          foreach ($secret in $secrets) {
            az keyvault secret set --vault-name $vaultName --name $secret.name --value="$($secret.value)" --output none
          }
        }

        $bots = @(
          @{ appName = "bffnsimplehostbotdotnet"; variables = @{ appId = "BffnSimpleHostBotDotnetAppId"; appSecret = "BffnSimpleHostBotDotnetAppSecret"; objectId = "BffnSimpleHostBotDotnetAppObjectId" }},
          @{ appName = "bffnsimplehostbot21dotnet"; variables = @{ appId = "BffnSimpleHostBot21DotnetAppId"; appSecret = "BffnSimpleHostBot21DotnetAppSecret"; objectId = "BffnSimpleHostBot21DotnetAppObjectId" }},
          @{ appName = "bffnechoskillbotdotnet"; variables = @{ appId = "BffnEchoSkillBotDotnetAppId"; appSecret = "BffnEchoSkillBotDotnetAppSecret"; objectId = "BffnEchoSkillBotDotnetAppObjectId" }},
          @{ appName = "bffnechoskillbot21dotnet"; variables = @{ appId = "BffnEchoSkillBot21DotnetAppId"; appSecret = "BffnEchoSkillBot21DotnetAppSecret"; objectId = "BffnEchoSkillBot21DotnetAppObjectId" }},
          @{ appName = "bffnechoskillbotv3dotnet"; variables = @{ appId = "BffnEchoSkillBotV3DotnetAppId"; appSecret = "BffnEchoSkillBotV3DotnetAppSecret"; objectId = "BffnEchoSkillBotV3DotnetAppObjectId" }},
          @{ appName = "bffnsimplecomposerhostbotdotnet"; variables = @{ appId = "BffnSimpleComposerHostBotDotnetAppId"; appSecret = "BffnSimpleComposerHostBotDotnetAppSecret"; objectId = "BffnSimpleComposerHostBotDotnetAppObjectId" }}
          @{ appName = "bffnechocomposerskillbotdotnet"; variables = @{ appId = "BffnEchoComposerSkillBotDotnetAppId"; appSecret = "BffnEchoComposerSkillBotDotnetAppSecret"; objectId = "BffnEchoComposerSkillBotDotnetAppObjectId" }}
          @{ appName = "bffnwaterfallhostbotdotnet"; variables = @{ appId = "BffnWaterfallHostBotDotnetAppId"; appSecret = "BffnWaterfallHostBotDotnetAppSecret"; objectId = "BffnWaterfallHostBotDotnetAppObjectId" }}
          @{ appName = "bffnwaterfallskillbotdotnet"; variables = @{ appId = "BffnWaterfallSkillBotDotnetAppId"; appSecret = "BffnWaterfallSkillBotDotnetAppSecret"; objectId = "BffnWaterfallSkillBotDotnetAppObjectId" }}
          @{ appName = "bffnsimplehostbotjs"; variables = @{ appId = "BffnSimpleHostBotJsAppId"; appSecret = "BffnSimpleHostBotJsAppSecret"; objectId = "BffnSimpleHostBotJsAppObjectId" }},
          @{ appName = "bffnechoskillbotjs"; variables = @{ appId = "BffnEchoSkillBotJsAppId"; appSecret = "BffnEchoSkillBotJsAppSecret"; objectId = "BffnEchoSkillBotJsAppObjectId" }},
          @{ appName = "bffnechoskillbotv3js"; variables = @{ appId = "BffnEchoSkillBotV3JsAppId"; appSecret = "BffnEchoSkillBotV3JsAppSecret"; objectId = "BffnEchoSkillBotV3JsAppObjectId" }},
          @{ appName = "bffnsimplehostbotpython"; variables = @{ appId = "BffnSimpleHostBotPythonAppId"; appSecret = "BffnSimpleHostBotPythonAppSecret"; objectId = "BffnSimpleHostBotPythonAppObjectId" }},
          @{ appName = "bffnechoskillbotpython"; variables = @{ appId = "BffnEchoSkillBotPythonAppId"; appSecret = "BffnEchoSkillBotPythonAppSecret"; objectId = "BffnEchoSkillBotPythonAppObjectId" }}
        )

        $token = GetToken;

        foreach ($bot in $bots) {
          $botName = "$($bot.appName)$($env:BotNamesSuffix)";
          Write-Host "`n[$botName] Starting";
          Write-Host "Creating App Registration ...";
          
          $app = CreateAppRegistration $token $botName;
          Write-Host "
            App Registration:
              Name: $botName;
              Variables:
                $($bot.variables.objectId): $($app.id);
                $($bot.variables.appId): $($app.appId);
          ";

          Write-Host "Storing App Registration into the KeyVault (${{ parameters.keyVault }}) ...";
          SaveAppRegistrationIntoKeyVault "${{ parameters.keyVault }}" $bot.variables $app;
          Write-Host "[$botName] Ending";
        }
