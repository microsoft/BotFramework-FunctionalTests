#
# Deletes resources from Deploy & Shared Pipelines for the Skills Functional Tests.
#

name: $(Build.BuildId)
trigger: none
pr: none

variables:
  AppInsights: 'bffnappinsights$($env:ResourceSuffix)'
  AppServicePlanLinux: 'bffnbotsappservicelinux$($env:ResourceSuffix)'
  AppServicePlanWindows: 'bffnbotsappservicewin$($env:ResourceSuffix)'
  CosmosDB: 'bffnbotstatedb$($env:ResourceSuffix)'
  KeyVault: 'bffnbotkeyvault$($env:ResourceSuffix)'
  # AzureSubscription: define in Azure
  # DeployResourceGroup: define in Azure
  # SharedResourceGroup: define in Azure
  # ResourceSuffix: (optional) define in Azure

pool:
  vmImage: 'windows-2019'

stages:
- stage: 'Delete_DotNet_Resource_Group'
  displayName: "Delete DotNet's Resource Group"
  dependsOn: []
  jobs:
    - job: 'Delete'
      displayName: "Delete steps"
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(DeployResourceGroup)-DotNet"

- stage: 'Delete_JS_Resource_Group'
  displayName: "Delete JS's Resource Group"
  dependsOn: []
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(DeployResourceGroup)-JS"

- stage: 'Delete_App_Service_Plan_Windows'
  displayName: 'Delete App Service Plan (Windows)'
  dependsOn: 
    - Delete_DotNet_Resource_Group
    - Delete_JS_Resource_Group
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - task: AzureCLI@2
          displayName: 'Delete App Service Plan (Windows)'
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for '$(AppServicePlanWindows)'...";
              $exists = az appservice plan show --name "$(AppServicePlanWindows)" --resource-group "$(SharedResourceGroup)"
              if ($exists) {
                Write-Host "Deleting '$(AppServicePlanWindows)'...";
                az appservice plan delete --name "$(AppServicePlanWindows)" --resource-group "$(SharedResourceGroup)" --yes
              } else {
                Write-Host "No pre-existing '$(AppServicePlanWindows)' resource found.";
              }

- stage: 'Delete_Python_Resource_Group'
  displayName: "Delete Python's Resource Group"
  dependsOn: []
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(DeployResourceGroup)-Python"

- stage: 'Delete_App_Service_Plan_Linux'
  displayName: 'Delete App Service Plan (Linux)'
  dependsOn:
    - Delete_Python_Resource_Group
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - task: AzureCLI@2
          displayName: 'Delete App Service Plan (Linux)'
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for '$(AppServicePlanLinux)'...";
              $exists = az appservice plan show --name "$(AppServicePlanLinux)" --resource-group "$(SharedResourceGroup)-linux"
              if ($exists) {
                Write-Host "Deleting '$(AppServicePlanLinux)'...";
                az appservice plan delete --name "$(AppServicePlanLinux)" --resource-group "$(SharedResourceGroup)-linux" --yes
              } else {
                Write-Host "No pre-existing '$(AppServicePlanLinux)' resource found.";
              }

- stage: 'Delete_App_Insights'
  displayName: 'Delete App Insights'
  dependsOn: []
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - task: AzureCLI@2
          displayName: 'Delete App Insights'
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              az config set extension.use_dynamic_install=yes_without_prompt
              az feature register --name AIWorkspacePreview --namespace microsoft.insights
              Write-Host "Looking for '$(AppInsights)'...";
              if ((az group exists -n "$(SharedResourceGroup)") -eq 'true') {
                $exists = az monitor app-insights component show --app "$(AppInsights)" --resource-group "$(SharedResourceGroup)"
                if ($exists) {
                  Write-Host "Deleting '$(AppInsights)'...";
                  az monitor app-insights component delete --app "$(AppInsights)" --resource-group "$(SharedResourceGroup)"
                } else {
                  Write-Host "No pre-existing '$(AppInsights)' resource found.";
                }
              } else {
                Write-Host "No pre-existing '$(SharedResourceGroup)' group found.";
              }

- stage: 'Delete_CosmosDB'
  displayName: 'Delete CosmosDB'
  dependsOn: []
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - task: AzureCLI@2
          displayName: 'Delete CosmosDB'
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for '$(CosmosDB)'...";
              $exists = az cosmosdb check-name-exists --name "$(CosmosDB)"
              if ($exists -eq $true) {
                Write-Host "Deleting '$(CosmosDB)'...";
                az cosmosdb delete --name "$(CosmosDB)" --resource-group "$(SharedResourceGroup)" --yes
              } else {
                Write-Host "No pre-existing '$(CosmosDB)' resource found.";
              }

- stage: 'Delete_App_Registrations'
  displayName: 'Delete App Registrations'
  dependsOn: []
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - template: deleteAppRegistrations.yml
          parameters:
            keyVault: "$(KeyVault)"
            resourceGroup: "$(SharedResourceGroup)"

- stage: 'Delete_Key_Vault'
  displayName: 'Delete Key Vault'
  dependsOn: 
    - Delete_App_Registrations
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - task: AzureCLI@2
          displayName: 'Delete Key Vault'
          inputs:
            azureSubscription: $(AzureSubscription)
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              Write-Host "Looking for '$(KeyVault)'...";
              $exists = az keyvault list --resource-group "$(SharedResourceGroup)" --query "[?name == '$(KeyVault)']" | ConvertFrom-Json
              if ($exists) {
                Write-Host "Deleting '$(KeyVault)'...";
                az keyvault delete --name "$(KeyVault)" --resource-group "$(SharedResourceGroup)"
                az keyvault purge --name "$(KeyVault)"
              } else {
                Write-Host "No pre-existing '$(KeyVault)' resource found.";
              }

- stage: 'Delete_Resource_Group_Windows'
  displayName: 'Delete Resource Group (Windows)'
  dependsOn: 
    - Delete_DotNet_Resource_Group
    - Delete_JS_Resource_Group
    - Delete_App_Service_Plan_Windows
    - Delete_App_Insights
    - Delete_CosmosDB
    - Delete_App_Registrations
    - Delete_Key_Vault
  jobs:
    - job: 'Delete'
      displayName: 'Delete steps'
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(SharedResourceGroup)"

- stage: 'Delete_Resource_Group_Linux'
  displayName: 'Delete Resource Group (Linux)'
  dependsOn: 
    - Delete_Python_Resource_Group
    - Delete_App_Service_Plan_Linux
  jobs:
    - job: 'Delete'
      displayName: 'Delete Resource Group (Linux)'
      steps:
        - template: ../common/deleteResourceGroup.yml
          parameters:
            name: "$(SharedResourceGroup)-linux"
