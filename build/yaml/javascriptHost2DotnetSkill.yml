#
# This YAML deploys a Host Javascript bot and builds and deploys a C# Skill bot, then runs the functional test
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'Debug'
  # AzureSubscription: define this in Azure
  # DeleteResourceGroup (Optional): define this in Azure
  # JsDotNetHostAppId: define this in Azure
  # JsDotNetHostAppSecret: define this in Azure
  # JsDotNetHostBotName: define this in Azure
  # JsDotNetSkillAppId: define this in Azure
  # JsDotNetSkillAppSecret: define this in Azure
  # JsDotNetSkillBotName: define this in Azure
  # SdkVersion (Optional): define this in Azure
  # NetCoreSdkVersionSkill: define this in Azure

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(JsDotNetHostBotName)
        SkillBotName: $(JsDotNetSkillBotName)
      steps:
      - template: cleanResourcesStep.yml
        
- stage: Build
  jobs:
    - job: Validate_Skill_NetCore_Version
      variables:
        Parameters.netCoreSdkVersion: $(NetCoreSdkVersionSkill)
      steps:
        - template: dotnetValidateNetCoreSdkVersion.yml

    - job: Build_Skill_Bot
      dependsOn: Validate_Skill_NetCore_Version
      variables:
        Parameters.solution: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.sln'
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.csproj'
      steps:
      - template: dotnetInstallPackagesSteps.yml
      - template: dotnetBuildSteps.yml

- stage: Deploy
  jobs:
    - job: Deploy_Host
      variables:
        Parameters.sourceLocation: 'SkillsFunctionalTests/javascript/host'
        BotName: $(JsDotNetHostBotName)
        DeployAppId: $(JsDotNetHostAppId)
        DeployAppSecret: $(JsDotNetHostAppSecret)
        TemplateLocation: 'SkillsFunctionalTests/javascript/host/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - powershell: |
         Write-host "Setting values in .env file"
         $file = "$(System.DefaultWorkingDirectory)/SkillsFunctionalTests/javascript/host/.env";
         $content = Get-Content -Raw $file | ConvertFrom-StringData;

         $content.SkillHostEndpoint = "https://$(JsDotNetHostBotName)-$(Build.BuildId).azurewebsites.net/api/skills";
         $content.SkillId = "EchoSkillBot";
         $content.SkillAppId = "$(JsDotNetSkillAppId)";
         $content.SkillEndpoint = "https://$(JsDotNetSkillBotName)-$(Build.BuildId).azurewebsites.net/api/messages";

         Clear-Content $file;
         foreach ($key in $content.keys) { Add-Content $file "$key=$($content.$key)" };
        displayName: 'Update .env file'

      - template: javascriptDeploySteps.yml

    - job: Deploy_Skill
      variables:
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.csproj'
        BotName: $(JsDotNetSkillBotName)
        DeployAppId: $(JsDotNetSkillAppId)
        DeployAppSecret: $(JsDotNetSkillAppSecret)
        ProjectName: EchoSkillBot
        TemplateLocation: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - template: dotnetDeploySteps.yml

- stage: Test
  dependsOn: Deploy
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(JsDotNetHostBotName)
        Parameters.project: 'SkillsFunctionalTests/tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        Parameters.solution: 'SkillsFunctionalTests/tests/SkillFunctionalTests.sln'
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  jobs:
    - job: Delete_RG
      steps:
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(JsDotNetHostBotName)-RG" --yes
           call az group delete -n "$(JsDotNetSkillBotName)-RG" --yes
        condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
